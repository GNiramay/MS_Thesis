// Program to calculate energy resolution for different cases

TString DATE = "09_09_19";
TString PATH_WWW="/afs/cern.ch/user/n/ngogate/www/PionShower/EnRes_Comp_"+DATE+"/";

bool DoRescale =false;

void ShiftIt(TH1F* h);
void MakePlots(TString);

double Find_EnRes(TH1F*,int,int);
double Res1[6],Res2[6],Res3[6],Res4[6];
double Comp[6] = {1,2,3,4,5,6};
double ERR[4][6];		// 4 for 4 types, 6 for 6 compartments
double exx[6]={0};

// double TotEnRes[4]={0.09,0.05,0.14,0.14};		// Inclusive energy resolution
// order: Data, abs, leak, sim
double TotEnRes[4]={0.14,0.09,0.05,0.14};		// Inclusive energy resolution

TLine* tln[4];						// To draw lines for above

void EnRes()
{
  TString energy[8] = {"300","250","200","120","100","80","50","20"};
  for(int i=0;i<8;i++)
    {
      MakePlots(energy);
    }
}

void MakePlots(TString energy)
{
  TFile* tf1 = new TFile("../MyCheckLeakage/Pion_Sim_"+energy+"_temp.root");
  TFile* tf2 = new TFile("CERN_Root_Files/All_200.root");
  gStyle->SetTitleFont(132,"t");
  gStyle->SetTextFont(132);

  TCanvas* tc = new TCanvas("aa","bb",800,600);

  // TLegend* tl = new TLegend(0.1,0.7,0.35,0.9);
  // TLegend* tl = new TLegend(0.1,0.8,0.9,0.9);
  TLegend* tl = new TLegend(0.1,0.8,0.9,0.9);
  tl->SetNColumns(2);
  tl->SetTextSize(0.0315);
  tl->SetTextFont(132);

  TString HH[6] = {"1","2","3","4","5","6"}; // the index needed for following hists
  TString DD[6]={"0 to 0.35","0.35 to 0.75","0.75 to 1.03","1.03 to 1.43","1.43 to 2.7","more than 2.7"};// The depth of each compartment
  cout<<"Comp\tABS\t\tLIK\t\tWGT\t\tDAT\n";

  if(DoRescale) DATE = DATE+"resc";
  for(int i=0;i<6;i++)
  // for(int i=5;i<6;i++)
    {       
      TH1F* ABS1 = (TH1F*)tf1->Get("Sum_Abs_"+HH[i]);
      TH1F* LIK1 = (TH1F*)tf1->Get("Sum_Abs_Leak_"+HH[i]);
      TH1F* WGT1 = (TH1F*)tf1->Get("RecEn_"+HH[i]);
      TH1F* DAT1 = (TH1F*)tf2->Get("RecEn_"+HH[i]);
      
      // if(DoRescale)
      // 	{
      // 	  ShiftIt(ABS1);
      // 	  ShiftIt(LIK1);
      // 	  ShiftIt(WGT1);
      // 	  ShiftIt(DAT1);
      // 	}

      Res1[i] = Find_EnRes(ABS1,0,i);
      Res2[i] = Find_EnRes(LIK1,1,i);
      Res3[i] = Find_EnRes(WGT1,2,i);
      Res4[i] = Find_EnRes(DAT1,3,i);

      cout<<i<<"\t"<<Res1[i]<<"\t"<<Res2[i]<<"\t"<<Res3[i]<<"\t"<<Res4[i]<<endl;
    }
  // TGraph* ABS = new TGraph(6,Comp,Res1);
  // TGraph* LIK = new TGraph(6,Comp,Res2);
  // TGraph* WGT = new TGraph(6,Comp,Res3);
  // TGraph* DAT = new TGraph(6,Comp,Res4);

  TGraphErrors* ABS = new TGraphErrors(6,Comp,Res1,exx,ERR[0]);
  TGraphErrors* LIK = new TGraphErrors(6,Comp,Res2,exx,ERR[1]);
  TGraphErrors* WGT = new TGraphErrors(6,Comp,Res3,exx,ERR[2]);
  TGraphErrors* DAT = new TGraphErrors(6,Comp,Res4,exx,ERR[3]);
  
  TMultiGraph* tmg = new TMultiGraph();
  if(DoRescale)   tmg->SetTitle("HGCal Energy resolution (After rescaling + reshifting) | Pion "+energy+" GeV;Compartment number; Energy Resolution ( #frac{#sigma}{#mu} )");
  else tmg->SetTitle("HGCal Energy resolution | Pion "+energy+" GeV;Compartment number; Energy Resolution ( #frac{#sigma}{#mu} )");

  tl->AddEntry(DAT,"Weighted #Sigma rechit_energy (Data)","p");
  tl->AddEntry(WGT,"Weighted #Sigmarechit_energy(Sim)","p");
  tl->AddEntry(ABS,"Total Energy in absorbers","p");
  tl->AddEntry(LIK,"E_abs + Trans. Leakage","p");

  LIK->SetMarkerColor(3);
  ABS->SetMarkerColor(2);
  WGT->SetMarkerColor(4);
  DAT->SetMarkerColor(1);

  LIK->SetMarkerStyle(21);
  ABS->SetMarkerStyle(21);
  WGT->SetMarkerStyle(21);
  DAT->SetMarkerStyle(21);

  tmg->Add(ABS,"APL");
  tmg->Add(LIK,"APL");
  tmg->Add(WGT,"APL");
  tmg->Add(DAT,"AP");

  tmg->SetMaximum(0.25);
  tmg->SetMinimum(0.01);		// 29.08.19

  tmg->Draw("AP");
  tmg->GetYaxis()->SetTitleOffset(1.3);
  tmg->GetXaxis()->SetTitleFont(132);
  tmg->GetYaxis()->SetTitleFont(132);
  tl->Draw();

  // for(int i=0;i<4;i++)
  //   {
  //     tln[i] = new TLine(0.75,TotEnRes[i],6.25,TotEnRes[i]);
  //     tln[i]->SetLineStyle(9);
  //     tln[i]->SetLineWidth(2);
  //     tln[i]->SetLineColor(i+1);
  //     tln[i]->Draw("same");
  //   }



  tc->SaveAs("PNG/RecoEn/Pion_"+energy+"_En_Res_"+DATE+".png");
  tc->SaveAs("PDF/RecoEn/Pion_"+energy+"_En_Res_"+DATE+".pdf");
  // gSystem->Exec("scp PNG/RecoEn/Pion_"+energy+"_En_Res_"+DATE+".png ngogate@lxplus7.cern.ch:"+PATH_WWW);
}

// double Find_EnRes(TH1F* HH,int ii)
double Find_EnRes(TH1F* HH,int typ,int ii)
{
  Double_t hmean = HH->GetMean();
  Double_t hsgm = HH->GetStdDev();
  Double_t rng = 2;
  TCanvas* tcc = new TCanvas("GausFitting","GausFitting",800,600);

  // TFitResultPtr rr2 = HH->Fit("gaus","SQNR","",hmean-rng*hsgm,hmean+rng*hsgm);
  // TFitResultPtr rr2 = HH->Fit("gaus","SQR","",hmean-rng*hsgm,hmean+rng*hsgm);
  TFitResultPtr rr2 = HH->Fit("gaus","SQNR","",hmean-1.5*hsgm,hmean+1*hsgm);
  // TFitResultPtr rr2 = HH->Fit("gaus","SQN"); // Quiet fitting

  double MEAN=rr2->Parameter(1);
  double SIGMA=rr2->Parameter(2);

  double MM = rr2->Error(1);
  double SS = rr2->Error(2);
  ERR[typ][ii] = sqrt(pow(SS/MEAN,2)+pow(SIGMA*MM/(MEAN*MEAN),2));

  delete tcc;
  return(SIGMA/MEAN);
  // // double MM = rr2->GetParError(1);
  // // double SS = rr2->GetParError(2);


  // AxisStyle(HH->GetYaxis());
  // AxisStyle(HH->GetXaxis());
  // HH->GetXaxis()->SetTitle("Weighted energy (in MIPs)");
  // HH->GetYaxis()->SetTitle("No. of events");
  // HH->GetYaxis()->SetTitleOffset(1);
  // HH->SetTitle("Weighted Energy Distribution");
  // HH->GetXaxis()->SetRange(0,80000); // ONLY FOR 300 GEV

  // char* ll[50];

  // sprintf(ll,"%i",ii));

  // char* ll = new char["+energy+"];
  // sprintf(ll,"%sLayer_%i.png",FitG,ii+1);
  // // tcc->SaveAs("../Output_PNG/GaussFitting/Layer_"+ll+OutPNG);

  // tcc->SaveAs(ll);
  // sprintf(ll,"%sLayer_%i.pdf",FitG2,ii+1);
  // tcc->SaveAs(ll);
  // delete tcc;

  // return(SIGMA/MEAN);
}


void ShiftIt(TH1F* h)
{
//   // Double_t MM = h->GetMean();
//   Double_t MM = h->GetXaxis()->GetBinCenter(h->GetMaximumBin());
//   int NN = h->GetNbinsX();
//   Double_t EE = h->GetEntries();
//   vector<Double_t> xx,yy;

//   for(int i=0;i<NN;i++){
//     xx.push_back(h->GetBinCenter(i));
//     yy.push_back(h->GetBinContent(i));
//     h->SetBinContent(i,0);
//   }

//   for(int i=0;i<NN;i++){
//     h->Fill(xx[i]+200-MM,yy[i]);
//     // for(int j = 0 ; j<yy[i] ; j++){h->Fill(xx[i]+200-MM);}
//   }
//   h->ResetStats();
//   Double_t norm = h->GetEntries();
//   h->SetEntries(EE);
}
